/* Global */

* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

:root {
    
    /* Light Theme */

    --light-theme-primary: #81c784;
    --light-theme-primary-light: #b2fab4;
    --light-theme-primary-dark: #519657;
    
    --light-theme-background: #ffffff;
    --light-theme-surface: #e8f5e9;

    --light-theme-border: 2px solid grey;
    
    --light-theme-secondary-text: grey;

    --light-theme-box-shadow: 2px 2px 10px 2px grey;

    /* Dark Theme */
    
    --dark-theme-primary: #4caf50;
    --dark-theme-primary-light: #80e27e;
    --dark-theme-primary-dark: #087f23;

    --dark-theme-background: #373737;
    --dark-theme-surface: #424242;

    --dark-theme-border: 2px solid rgb(191, 191, 191);

    --dark-theme-secondary-text: rgb(156, 156, 156);

    --dark-theme-box-shadow: 2px 2px 10px 2px rgb(66, 66, 66);

    /* Theme toggle */

    --toggle-width: 80px;
    --toggle-height: calc(var(--toggle-width) / 2);
    --toggle-padding: 5px;
    --toggle-border-width: 2px;
    --toggle-circle: calc(var(--toggle-width) / 2 - var(--toggle-padding) * 2 - var(--toggle-border-width) * 2);
    --sun-color-for-theme-toggle: rgb(255, 190, 68);
    --moon-color-for-theme-toggle: rgb(255, 255, 255);

    /* Global */

    --transition: 0.3s;

    --rowHeight: 50px;

    --global-padding: 4vw;
}

.lightTheme {
    --primary: var(--light-theme-primary);
    --primary-light: var(--light-theme-primary-light);
    --primary-dark: var(--light-theme-primary-dark);

    --background: var(--light-theme-background);
    --surface: var(--light-theme-surface);

    --border: var(--light-theme-border);

    --text: black;
    --secondary-text: var(--light-theme-secondary-text);

    --box-shadow: var(--light-theme-box-shadow);
    
    transition: var(--transition);
}
.darkTheme {
    
    --primary: var(--dark-theme-primary);
    --primary-light: var(--dark-theme-primary-dark);
    --primary-dark: var(--dark-theme-primary-dark);
    
    --background: var(--dark-theme-background);
    --surface: var(--dark-theme-surface);

    --border: var(--dark-theme-border);
    
    --text: white;
    --secondary-text: var(--dark-theme-secondary-text);
    
    --box-shadow: var(--dark-theme-box-shadow);

    transition: var(--transition);
}



/* Typography */

* {
    font-family: Arial, Helvetica, sans-serif;
    color: var(--text);
}
h1 {
    font-size: 28px;
    line-height: 1;
}
h2 {
    font-size: 24px;
    line-height: 1;
}
h3 {
    font-size: 22px;
    line-height: 1;
    color: var(--secondary-text);

    height: 100%;

    display: flex;
    align-items: center;

    border-bottom: var(--border);
}
p, li, ul, ::placeholder, a, span, textarea, input, label {
    font-size: 18px;
    line-height: 1.5;
}
body {
    height: 100vh;
    background-color: var(--background)
}
.material-icons-round {
    font-size: 20px;
}

/* Header */

header {
    display: flex;
    justify-content: space-between;
    align-items: center;

    height: 10vh;

    background-color: var(--primary);

    padding: 0 var(--global-padding);
}
header h1 {
    display: flex;
    align-items: center;
    gap: 8px;
}
header .material-icons-round {
    font-size: 30px;
}
header .listsToggle {
    height: 50px;
    width: 50px;

    transition: var(--transition);
}
header .listsToggle .material-icons-round {
    font-size: 50px;

}
header .listsToggleOn {
    transform: rotate(180deg);
}
header input#themeToggle {
    width: 0;
    height: 0;
    visibility: hidden;
    position: absolute;
}
header .themeToggle {
    width: var(--toggle-width);
    height: var(--toggle-height);

    border-color: var(--border);
    background-color: var(--surface);
    border: var(--border);
    border-width: var(--toggle-border-width);
    border-radius: var(--toggle-width);

    display: flex;
    flex-direction: column;
    
    padding: var(--toggle-padding);
}
.themeToggleCircle {
    margin-left: 0;
    margin-right: auto;
    
    width: var(--toggle-circle);
    height: var(--toggle-height);

    background-color: var(--sun-color-for-theme-toggle);

    box-shadow: none;
    
    border-radius: var(--toggle-width);
    transition: var(--transition);
}
#themeToggle:checked + .themeToggle .themeToggleCircle {
    margin-right: 0;
    margin-left: calc(var(--toggle-width) - var(--toggle-circle) - var(--toggle-padding) * 2 - var(--toggle-border-width) * 2);
    /* 
    Transition with this property does not work for some reason
    Worth posting about
    */
    /* margin-left: auto; */

    background-color: rgba(255, 255, 255, 0);

    box-shadow: inset calc(var(--toggle-height) / 6 * (-1)) calc(var(--toggle-width) / 10 * (-1)) 0px 0px var(--moon-color-for-theme-toggle);
    
    transition: var(--transition);
}

/* Main Container */

.mainContainer {
    width: 100vw;
    height: 90vh;

    display: flex;

    padding: 0 var(--global-padding);

    border-top: var(--border);
}


/*  */

.listsContainer, .tasksContainer, .taskDetailsContainer {
    padding: 16px;
}
.inputField {
    border: none;
    width: 100%;
    height: var(--rowHeight);
    padding: 8px;
}
input, textarea {
    background-color: var(--background);
    border: none;
}

/* Lists Container */

.listsContainer {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: var(--rowHeight) min-content var(--rowHeight) min-content;

    gap: 16px;
 
    width: 25vw;

    transition: var(--transition);
}
.listsContainerClosed {
    width: 0;
    padding-right: 0;
    padding-left: 0;
    overflow: hidden;
}
.regularListsContainer, .smartListsContainer {
    display: flex;
    flex-direction: column;
}
.list, .listSelected {
    display: flex;
    justify-content: space-between;
    align-items: center;

    padding: 8px;
    
    white-space: nowrap;
    
    transition: var(--transition);
}
.listName {
    flex: 1;
}
.smartListsContainer .list, .smartListsContainer .listSelected {
    display: flex;
    justify-content: start;
    gap: 8px;
}
.list:hover .listDeleteButton, .listSelected:hover .listDeleteButton {
    display: flex;
}
.list:hover {
    background-color: var(--primary-light);
}
.listDeleteButton {
    width: 16px;
    height: 16px;

    display: flex;
    justify-content: center;
    align-items: center;

    display: none;
}
.listSelected {
    background-color: var(--primary);
    border: var(--border);
    box-shadow: var(--box-shadow);
    z-index: 1;
}

/* Tasks Container */

.tasksContainer {
    flex: 1;

    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: var(--rowHeight) min-content 25vh;

    border-left: var(--border);
    border-right: var(--border);

    gap: 16px;

    transition: var(--transition);
}
.tasksContainerListsToggleOn {
    border-left: none;
}
.selectedListName {
    grid-column: 1 / 3;
}
.tasksUncompletedContainer {
    grid-column: 1 / 3;
    grid-row: 2 / 3;

    display: grid;
    grid-template-columns: 1fr 24px;
    align-content: start;
}
.task, .taskCompleted, .taskSelected {
    grid-column: 1 / 3;

    display: flex;
    align-items: center;

    height: var(--rowHeight);
    padding: 0 8px;

    gap: 8px;

    background-color: var(--surface);

    transition: var(--transition);
}
.task .checkbox {
    height: 100%;
}
.tasksContainer .taskName {
    flex: 1;
    display: flex;
    align-items: center;
    height: 100%;
}
.tasksUncompletedContainer .addTaskDueDateLabel {
    display: flex;
    align-items: center;
    justify-content: end;

    height: 100%;
}
.tasksUncompletedContainer .addTaskDueDateInput {
    visibility: hidden;
    position: absolute;
    /* right: 10vw; */
}
.tasksUncompletedContainer .dueDateLabel,
.tasksCompletedContainer .dueDateLabel {
    display: flex;
    align-items: center;
    justify-content: start;
    align-self: flex-end;
    height: 100%;
}
.tasksUncompletedContainer .dueDateInput,
.tasksCompletedContainer .dueDateInput {
    visibility: hidden;
    width: 0;
}
.task:hover, .taskCompleted:hover {
    background-color: var(--primary-light);
    transition: var(--transition);
}
.taskDeleteButton {
    width: 16px;
    height: 16px;

    display: flex;
    justify-content: center;
    align-items: center;
}
.tasksCompletedContainer {
    grid-column: 1 / 3;
    display: grid;
    grid-template-columns: 1fr;
    align-content: start;

    color: var(--secondary-text);

    overflow: scroll;
}
.taskCompleted .taskName{
    text-decoration: line-through;
}
.tasksUncompletedContainer .taskSelected {
    background-color: var(--primary);
    box-shadow: var(--box-shadow);
    border: var(--border);
    z-index: 1;
}
.inputField::placeholder {
    color: var(--secondary-text);
}
.addTaskDueDateLabel .material-icons-round {
    color: var(--secondary-text);
}



 
/* Task Details Container */

.taskDetailsContainer {
    width: 25vw;

    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: var(--rowHeight) var(--rowHeight) 1fr;
    gap: 16px;

    transition: var(--transition);
}
.taskDetailsContainerListsToggleOn {
    width: 30vw;
}
.taskDetailsContainer .taskName::placeholder, 
.taskDetailsContainer .taskName {
    font-size: 22px;
    line-height: 1;
    font-weight: 700;
    color: var(--secondary-text);

    display: flex;
    align-items: center;

    width: 100%;

    border: none;
    border-bottom: var(--border);
}
.taskDetailsContainer .taskDescription,
.taskDetailsContainer .taskDescriptionActive {
    border: none;
    resize: none;
    transition: var(--transition);
    padding: 8px;
    height: 200px;
}
.taskDetailsContainer .taskDescriptionActive {
    border: var(--border)
}
.taskDetailsContainer .dueDateLabel {
    display: flex;
    align-items: center;
    justify-content: start;
    gap: 8px;
    height: 100%;
}
.taskDetailsContainer .dueDateInput {
    visibility: hidden;
    position: absolute;
}

